@page "/login"

@using Microsoft.AspNetCore.Authentication;
@using Microsoft.AspNetCore.Authentication.Cookies
@using PsychologyHealthCare.BlazorWebApp.Models
@using PsychologyHealthCare.Service
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@inject UserAccountService _userAccountService
@inject NavigationManager navigation

<h1 class="display-4 text-center">Login</h1>

<div class="row">
    <div class="col-md-4"></div>
    <div class="col-md-4">
        <EditForm Model="loginRequest" OnValidSubmit="HandleLogin" FormName="loginForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="form-group">
                <label for="username">Username</label>
                <InputText id="username" class="form-control" @bind-Value="loginRequest.UserName" />
                <ValidationMessage For="() => loginRequest.UserName" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginRequest.Password" />
                <ValidationMessage For="() => loginRequest.Password" class="text-danger" />
            </div>

            <div class="form-group text-danger">
                <p>@errorMessage</p>
            </div>

            <div class="form-group">
                <button type="submit" class="btn btn-primary">Login</button>
            </div>
        </EditForm>
    </div>
    <div class="col-md-4"></div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? httpContext { get; set; }

    [SupplyParameterFromForm]
    private LoginRequest loginRequest { get; set; } = new();

    private string errorMessage = "";

    private async Task HandleLogin()
    {
        errorMessage = "";

        try
        {
            var userAccount = await _userAccountService.Authenticate(loginRequest.UserName, loginRequest.Password);
            if (userAccount != null)
            {
                var claims = new List<Claim>
                {
                    new Claim(ClaimTypes.Name, userAccount.UserName),
                    new Claim(ClaimTypes.Role, userAccount.RoleId.ToString())
                };

                var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                var principal = new ClaimsPrincipal(identity);
                await httpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);

                await Task.Delay(1000);

                navigation.NavigateTo("/AppointmentTrackings/Index");
            }
            else
            {
                errorMessage = "Invalid username or password.";
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("An error occurred during login. " + e);
            errorMessage = "An error occurred during login.";
        }
    }
}
