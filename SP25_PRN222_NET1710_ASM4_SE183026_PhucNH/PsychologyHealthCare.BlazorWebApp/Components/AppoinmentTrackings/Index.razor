@page "/AppointmentTrackings/Index"

@attribute [Microsoft.AspNetCore.Authorization.Authorize]
@using PsychologyHealthCare.Repository.Models;
@using PsychologyHealthCare.Service;
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject IAppointmentTrackingService AppointmentTrackingService
@rendermode InteractiveServer

<h3>Appointment Trackings</h3>

<button class="btn btn-success" @onclick="CreateNew">Create New</button>

<div class="row mt-3">
    <div class="col-md-3">
        <input type="text" class="form-control" @bind="searchName" placeholder="Search Name" />
    </div>
    <div class="col-md-3">
        <input type="text" class="form-control" @bind="searchRating" placeholder="Search Rating" />
    </div>
    <div class="col-md-3">
        <input type="text" class="form-control" @bind="searchAddress" placeholder="Search Address" />
    </div>
    <div class="col-md-3">
        <button class="btn btn-primary" @onclick="@SearchAppointments">Search</button>
    </div>
</div>

<table class="table" id="indexTable">
    <thead>
        <tr>
            <th>Name</th>
            <th>Start Time</th>
            <th>End Time</th>
            <th>Created Date</th>
            <th>Updated Date</th>
            <th>Rating</th>
            <th>Holder</th>
            <th>Address</th>
            <th>Type</th>
            <th>System Status</th>
            <th>Program Tracking</th>
            <th>Actions</th>
        </tr>
    </thead>
    @if (appointments == null || appointments.Count == 0)
    {
        <p>Loading....</p>
    }
    else
    {
        <tbody>
            @foreach (var item in appointments)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.StartTime.ToString("dd-MM-yyyy HH:mm:ss")</td>
                    <td>@item.EndTime.ToString("dd-MM-yyyy HH:mm:ss")</td>
                    <td>@item.CreatedDate.ToString("dd-MM-yyyy HH:mm:ss")</td>
                    <td>@item.UpdatedDate?.ToString("dd-MM-yyyy HH:mm:ss")</td>
                    <td>@item.Rating</td>
                    <td>@item.Holder</td>
                    <td>@item.Address</td>
                    <td>@item.Type</td>
                    <td>@item.SystemStatus</td>
                    <td>@item.ProgramTracking?.Name</td>
                    <td>
                        <button class="btn btn-outline-info" @onclick="@(() => Edit(item.Id))">Edit</button>
                        <button class="btn btn-outline-secondary" @onclick="() => Details(item.Id)">Details</button>
                        <button class="btn btn-outline-danger" @onclick="() => Delete(item.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    }
</table>

<nav>
    <ul class="pagination">
        @if (PageNumber > 1)
        {
            <li class="page-item">
                <button class="page-link" @onclick="PreviousPage">Previous</button>
            </li>
        }

        @for (int i = 1; i <= TotalPages; i++)
        {
            <li class="page-item @(i == PageNumber ? "active" : "")">
                <button class="page-link" @onclick="() => LoadPage(i)">@i</button>
            </li>
        }

        @if (PageNumber < TotalPages)
        {
            <li class="page-item">
                <button class="page-link" @onclick="NextPage">Next</button>
            </li>
        }
    </ul>
</nav>

@code {
    private List<AppointmentTracking> appointments;
    private string searchName = "";
    private string searchRating = "";
    private string searchAddress = "";
    private int PageNumber = 1;
    private readonly int PageSize = 3;
    private int TotalPages;

    protected override async Task OnInitializedAsync()
    {
        await LoadPage(PageNumber);
    }

    private async Task LoadPage(int pageNumber)
    {
        var allAppointments = await AppointmentTrackingService.GetAllAsync();
        var totalItems = allAppointments.Count;
        TotalPages = (int)Math.Ceiling(totalItems / (double)PageSize);

        appointments = allAppointments.Skip((pageNumber - 1) * PageSize).Take(PageSize).ToList();
        PageNumber = pageNumber;
    }

    private async Task PreviousPage()
    {
        if (PageNumber > 1)
        {
            await LoadPage(PageNumber - 1);
        }
    }

    private async Task NextPage()
    {
        if (PageNumber < TotalPages)
        {
            await LoadPage(PageNumber + 1);
        }
    }

    private async Task SearchAppointments()
    {
        var allAppointments = await AppointmentTrackingService.Search(searchName, searchRating, searchAddress);
        TotalPages = (int)Math.Ceiling(allAppointments.Count / (double)PageSize);
        appointments = allAppointments.Skip((PageNumber - 1) * PageSize).Take(PageSize).ToList();
    }

    private void CreateNew()
    {
        Navigation.NavigateTo("/AppointmentTrackings/Create");
    }

    private void Edit(string id)
    {
        Navigation.NavigateTo($"/AppointmentTrackings/Edits/{id}");
    }

    private void Details(string id)
    {
        Navigation.NavigateTo($"/AppointmentTrackings/Details/{id}");
    }

    private void Delete(string id)
    {
        Navigation.NavigateTo($"/AppointmentTrackings/Delete/{id}");
    }
}